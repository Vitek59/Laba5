import numpy as np

class Network:
    def __init__(self, input_nodes, hidden_nodes, output_nodes, learning_rate):
        self.input_nodes = input_nodes
        self.hidden_nodes = hidden_nodes
        self.output_nodes = output_nodes
        self.learning_rate = learning_rate

        # Инициализация весов случайными значениями в диапазоне [-0.5, 0.5)
        self.weights_input_hidden = np.random.rand(self.hidden_nodes, self.input_nodes) - 0.5
        self.weights_hidden_output = np.random.rand(self.output_nodes, self.hidden_nodes) - 0.5

    def activation_function(self, x):
        return 1 / (1 + np.exp(-x))

    def train(self, network_inputs, network_output_targets):
        input_layer_outputs = np.array(network_inputs, ndmin=2).T

        hidden_layer_inputs = np.dot(self.weights_input_hidden, input_layer_outputs)
        hidden_layer_outputs = self.activation_function(hidden_layer_inputs)

        output_layer_inputs = np.dot(self.weights_hidden_output, hidden_layer_outputs)
        output_layer_outputs = self.activation_function(output_layer_inputs)
        output_layer_output_targets = np.array(network_output_targets, ndmin=2).T

        output_layer_errors = output_layer_output_targets - output_layer_outputs
        hidden_layer_errors = np.dot(self.weights_hidden_output.T, output_layer_errors)

        self.weights_hidden_output += self.learning_rate * np.dot(
            output_layer_errors * output_layer_outputs * (1 - output_layer_outputs),
            hidden_layer_outputs.T
        )
        self.weights_input_hidden += self.learning_rate * np.dot(
            hidden_layer_errors * hidden_layer_outputs * (1 - hidden_layer_outputs),
            input_layer_outputs.T
        )

    def query(self, network_inputs):
        input_layer_outputs = np.array(network_inputs, ndmin=2).T

        hidden_layer_inputs = np.dot(self.weights_input_hidden, input_layer_outputs)
        hidden_layer_outputs = self.activation_function(hidden_layer_inputs)

        output_layer_inputs = np.dot(self.weights_hidden_output, hidden_layer_outputs)
        output_layer_outputs = self.activation_function(output_layer_inputs)

        return output_layer_outputs.flatten()

# Пример использования:
# Создание экземпляра сети
input_nodes = 2
hidden_nodes = 3
output_nodes = 1
learning_rate = 0.1
nn = Network(input_nodes, hidden_nodes, output_nodes, learning_rate)

# Обучение сети на одном примере
inputs = [0.1, 0.2]
targets = [0.5]
nn.train(inputs, targets)

# Запрос значений от обученной сети
test_inputs = [0.3, 0.4]
output = nn.query(test_inputs)
print("Output from the network:", output)
